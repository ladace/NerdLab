define program
        [packageDefinition]
    |   [classDefinitionWithImport]
end define

keys
    import package
    class function var static
    public protected private
    if else while for
    null
end keys

compounds
    == != >= <=
    += -= *= /=
    || && ++ --
    ...
end compounds

comments
    //
    /* */
end comments

include "expression.grm"

define packageDefinition
    'package [id?] '{ [NL]
        [IN] [classDefinitionWithImport] [EX]
    '} [NL]
end define

define classDefinitionWithImport
    [importDeclaration*]
    [classDefinition]
end define

% Import Declaration

define importDeclaration
    'import [id] [dotLibField*] [dotStar?] '; [NL]
end define

define dotLibField
    '. [id]
end define

define dotStar
    '. '*
end define

% Class Definition

define classDefinition
    [classHeader] '{ [NL]
        [IN] [memberDefinition*] [EX]
    '} [NL]
end define

define classHeader
    [attr modifiers] 'class [id]
end define

define memberDefinition
        [memberFuncDefinition]
    |   [memberVarDefinition]
end define

define memberFuncDefinition
    [memberFuncHeader] '{ [NL]
        [IN] [statement*] [EX]
    '} [NL] [NL]
end define

define memberFuncHeader
    [attr modifiers] 'function [id] ([formalList]) [typeDeclaration?]
end define

define memberVarDefinition
    [attr modifiers] [staticModifiers?] 'var [id] [typeDeclaration?] [evaluation?] '; [NL]
end define

define modifiers
        'public
    |   'protected
    |   'private
end define

define staticModifiers
    'static
end define

define typeDeclaration
    ': [id]
end define

define formal
    [id] [typeDeclaration] [evaluation?]
end define

define formalList
        [formal,]
    |   '... [id]
end define

% Statement

define statement
        [primaryStatement?]'; [NL]
    |   [ifStatement]
    |   [forStatement]
end define

define primaryStatement
        [varDefinition]
    |   [assignment]
    |   [funcCall]
    |   [returnStatement]
end define

define varDefinition
    'var [id] [typeDeclaration?] [evaluation?]
end define

define assignment
        [leftValue] [evalop] [expression]
    |   [leftValue] [selfaddop]
end define

define leftValue
    [primary] [attainField*]
end define

define evaluation
    '= [expression]
end define

define funcCall
        [id] [attainField*] [arguments]
    |   ([funcDefinition]) [arguments]
    |   [newInstance]
end define

define funcDefinition
    'function [id?] ([formalList]) '{ [NL]
        [IN] [statement?] [EX]
    '} [NL] [NL]
end define

define attainField
    '. [id]
end define

define primary
        [number]
    |   [stringlit]
    |   [id] [attainField*]
    |   'null
    |   [arraylit]
    |   [primary]'[ [expression] ']
    |   [funcCall]
    |   ( [expression] )
end define

define newInstance
    'new [id] [attr arguments]
end define

define arguments
    ([expression,])
end define

define arraylit
    '[ [expression,] ']
end define

% some statement
define ifStatement
        'if ([expression]) '{ [NL]
            [IN] [statement*] [EX]
        '} [NL]
         [elseStatement?]
    |   'if ([expression]) [statement]
        [elseStatement?]
end define

define elseStatement
        'else '{ [NL]
            [IN] [statement*] [EX]
        '} [NL]
    |   'else [statement]
end define

define returnStatement
    'return [expression]
end define

define forStatement
        'for ([primaryStatement] '; [expression] '; [primaryStatement] ) [NL]
            [IN] [statement] [EX]
    |   'for ([primaryStatement] '; [expression] '; [primaryStatement] ) '{ [NL]
            [IN] [statement*] [EX]
        '}[NL]
end define

