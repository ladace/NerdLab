-- The program use types.used and import.stars generated by as2hx.txl to automatically generate the import clauses in Haxe (For Haxe 2.x doesn't support import xxx.*)
-- FIXME the ambiguous class reference isn't detected
module AS2HX where
import System.Cmd
import System.Environment
import Data.List
import HaxeFind

main :: IO ()
main = do
    system "txl Sample.as"
    haxePath <- getEnv "HAXEPATH"
    importLines <- readFile "import.stars"
    -- get all classes from the import xxx.* given
    classLists <- mapM (\line -> do
            classes <- case (stripPrefix "import " line) of
                Just l -> findClasses haxePath l
                Nothing -> return []
            return (line, classes) ) $ lines importLines

    -- get types and generate import clauses
    typeContents <- readFile "types.used"
    types <- return $ nub $ lines typeContents
    let primaryGenLines = map (\t -> case find (elem t . snd) classLists of
                    Just l -> replaceToStr '*' t $ fst l
                    Nothing -> "Error" ) types
        genLines = filter (/="Error") primaryGenLines
        result = foldr (++) [] $ map (++"\n") genLines
    -- putStrLn $ show $ zip types primaryGenLines -- uncomment this to debug
    -- write to import.gen
    putStrLn "Generated import clauses:"
    putStrLn result
    writeFile "import.gen" result
    return ()

replaceToStr :: Eq a => a -> [a] -> [a] -> [a]
replaceToStr c str [] = []
replaceToStr c str (x:xs) = if x == c
    then str ++ replaceToStr c str xs
    else x:replaceToStr c str xs
